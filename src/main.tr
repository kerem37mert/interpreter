// AST Ayrıştırıcı Test Dosyası
// Bu test dosyası, tüm dil yapılarının AST düğümlerine doğru şekilde ayrıştırıldığını doğrular

// Test 1: Temel İfadeler
deg x:sayı = 5;
deg y:sayı = 10;
deg z:sayı = x + y;
yaz z;

// Test 2: Mantıksal ve Karşılaştırma İfadeleri
deg a:doğruluk = doğru;
deg b:doğruluk = yanlış;
deg c:doğruluk = a && b;
deg d:doğruluk = x > y;
deg e:doğruluk = x == y;

// Test 3: Tekli İfadeler
deg f:sayı = -x;
deg g:doğruluk = !a;

// Test 4: Dizi İşlemleri
deg dizi:sayı[] = [1, 2, 3, 4, 5];
deg ilk:sayı = dizi[0];
dizi[1] = 10;

<
// Test 5: Fonksiyon Tanımlamaları ve Çağrıları
fonk topla:sayı => a:sayı, b:sayı {
    dön a + b;
}

deg sonuc:sayı = topla(x, y);

// Test 6: Kontrol Akışı İfadeleri
eğer (x > y) {
    yaz "x büyük";
} yoksa eğer (x == y) {
    yaz "eşit";
} yoksa {
    yaz "y büyük";
}

// Test 7: Döngü İfadeleri
deg i:sayı = 0;
döngü (i < 5) {
    yaz i;
    i = i + 1;
}

// Test 8: Döngü Kontrol İfadeleri
döngü (doğru) {
    eğer (i > 10) {
        kır;
    }
    eğer (i % 2 == 0) {
        devam;
    }
    yaz i;
    i = i + 1;
}

// Test 9: Blok İfadeleri
{
    deg yerel:sayı = 42;
    yaz yerel;
}

// Test 10: Türlü Değişken Tanımlamaları
deg metin:metin = "Merhaba";
deg sayi:sayı = 123;
deg bayrak:doğruluk = doğru;

// Test 11: Sabit Tanımlamaları
sbt PI:sayı = 3.14;
sbt SELAMLAMA:metin = "Selam";

// Test 12: Dizi Türü Tanımlamaları
deg sayilar:sayı[] = [1, 2, 3];
deg kelimeler:metin[] = ["bir", "iki", "üç"];

// Test 13: Karmaşık İfadeler
deg karmaşık:sayı = (x + y) * (z - w) / (a && b || c);

// Test 14: İç İçe Fonksiyon Çağrıları
fonk faktoriyel:sayı => n:sayı {
    eğer (n <= 1) {
        dön 1;
    }
    dön n * faktoriyel(n - 1);
}

// Test 15: Fonksiyonlarla Dizi İşlemleri
fonk dizitoplami:sayı => dizi:sayı[] {
    deg toplam:sayı = 0;
    deg i:sayı = 0;
    döngü (i < dizi.uzunluk) {
        toplam = toplam + dizi[i];
        i = i + 1;
    }
    dön toplam;
}

// Test 16: Çoklu Dönüş Türleri
fonk işlem:(sayı, metin) => deger:sayı {
    eğer (deger > 0) {
        dön (deger * 2, "Pozitif");
    }
    dön (deger * -1, "Negatif");
}

// Test 17: Karmaşık Kontrol Akışı
fonk enbuyukbul:sayı => dizi:sayı[] {
    eğer (dizi.uzunluk == 0) {
        dön 0;
    }

    deg enbuyuk:sayı = dizi[0];
    deg i:sayı = 1;
    döngü (i < dizi.uzunluk) {
        eğer (dizi[i] > enbuyuk) {
            enbuyuk = dizi[i];
        }
        i = i + 1;
    }
    dön enbuyuk;
}

// Test 18: İç İçe Diziler
deg matris:sayı[][] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
deg eleman:sayı = matris[1][2];

// Test 19: Metin İşlemleri
deg metin1:metin = "Merhaba";
deg metin2:metin = "Dünya";
deg birlestirilmis:metin = metin1 + " " + metin2;

// Test 20: Karmaşık Tür Tanımlamaları
deg karmaşıkDizi:(sayı, metin)[] = [(1, "bir"), (2, "iki"), (3, "üç")];